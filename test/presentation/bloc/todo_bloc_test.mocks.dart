// Mocks generated by Mockito 5.4.6 from annotations
// in todo_list_refactor/test/presentation/bloc/todo_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_list_refactor/core/usecases/usecases.dart' as _i7;
import 'package:todo_list_refactor/features/todo/domain/entities/todo_entity.dart'
    as _i5;
import 'package:todo_list_refactor/features/todo/domain/repositories/todo_repository.dart'
    as _i2;
import 'package:todo_list_refactor/features/todo/domain/usecases/add_todo.dart'
    as _i3;
import 'package:todo_list_refactor/features/todo/domain/usecases/delete_todos.dart'
    as _i9;
import 'package:todo_list_refactor/features/todo/domain/usecases/get_todos.dart'
    as _i6;
import 'package:todo_list_refactor/features/todo/domain/usecases/toggle_todo.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeTodoRepository_0 extends _i1.SmartFake
    implements _i2.TodoRepository {
  _FakeTodoRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AddTodo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTodo extends _i1.Mock implements _i3.AddTodo {
  MockAddTodo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTodoRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TodoRepository);

  @override
  _i4.Future<void> call(_i5.TodoEntity? todo) =>
      (super.noSuchMethod(
            Invocation.method(#call, [todo]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [GetTodos].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTodos extends _i1.Mock implements _i6.GetTodos {
  MockGetTodos() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTodoRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TodoRepository);

  @override
  _i4.Future<List<_i5.TodoEntity>> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<List<_i5.TodoEntity>>.value(
              <_i5.TodoEntity>[],
            ),
          )
          as _i4.Future<List<_i5.TodoEntity>>);
}

/// A class which mocks [ToggleTodos].
///
/// See the documentation for Mockito's code generation for more information.
class MockToggleTodos extends _i1.Mock implements _i8.ToggleTodos {
  MockToggleTodos() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTodoRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TodoRepository);

  @override
  _i4.Future<void> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DeleteTodo].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTodo extends _i1.Mock implements _i9.DeleteTodo {
  MockDeleteTodo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTodoRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TodoRepository);

  @override
  _i4.Future<void> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ClearTodos].
///
/// See the documentation for Mockito's code generation for more information.
class MockClearTodos extends _i1.Mock implements _i9.ClearTodos {
  MockClearTodos() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTodoRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TodoRepository);

  @override
  _i4.Future<void> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
